---
# Run with ansible-playbook <filename> -u ubuntu -i ../{path-of-your-inventory-file}
# don't forget to add the IPs of the instances you want to manage to /etc/ansible/hosts file

- hosts: all

  become: yes # use sudo by default
  vars_files: 
    - /Users/nocs/Documents/cloud-engineer/application/ansible-conf/host_vars/variables.yml

  tasks:

    # - include_vars: "../ansible-config/host_vars/vars.yml"
    # - debug: var=vhost_name

    - name: Install nginx.
      package: name=nginx state=latest

    - name: Install mysql client.
      package: name=mysql-client-core-5.7 state=latest

    - name: Ensure destination dir exists 
      file: path="{{project_dir}}" state="directory"  owner="{{site_owner}}" group="{{site_group}}" mode=0775 recurse=yes
      tags:
      - joomla
    - debug: msg="Folder project doesn't exist"
      when: project_dir == false

    - name: Create main nginx config file
      template:
        src: "templates/nginx.conf"
        dest: "/etc/nginx/nginx.conf"
      notify:
      - restart nginx
    
    - name: Create nginx vhost config file
      template:
        src: "templates/katavhost"
        dest: "/etc/nginx/sites-available/{{ vhost_name }}"
      notify:
      - restart nginx
  
    - name: Create symbolic link for nginx vhost
      file:
        src: "/etc/nginx/sites-available/{{ vhost_name }}"
        dest: "/etc/nginx/sites-enabled/{{ vhost_name }}"
        state: link
    
    - name: Remove default nginx vhost configuration
      file: path=/etc/nginx/sites-enabled/default state=absent
      notify:
      - restart nginx
    
    - name: Removing
      file: path=/var/www/html state=absent
      notify:
      - restart nginx
      
    # Get Joomla
    - debug: var=get_from_repo

    - debug: var=reinstallation

    - debug: msg="Reinstall joomla from scratch"
      when: reinstallation == true

    - debug: msg="Not reinstall joomla from scratch"
      when: reinstallation == false

    - name: Set reinstall to yes 
      set_fact:
        j_force_param_str: "yes"
      when: reinstallation

    - name: Set reinstall to no
      set_fact:
        j_force_param_str: "no"
      when: reinstallation == false

    # Change rotation on nginx 
    - name: Change rotation nginx logs
      command: sed "s/rotate 14/rotate 7/g" /etc/logrotate.d/nginx

      
    # Append PHP-fpm settings for the sessions and fix perms

    - name: Change file ownership, group and permissions
      file:
        path: /var/lib/php/sessions
        state: directory
        recurse: yes
        owner: www-data
        group: www-data
        mode: '0777'

    - name: Insert a line at the end of a file.
      blockinfile:
        path: /etc/php/7.2/fpm/pool.d/www.conf
        insertafter: EOF
        block: |
          php_flag[display_errors] = on
          php_admin_value[error_log] = /var/log/fpm-php.www.log
          php_admin_flag[log_errors] = on
          php_admin_value[memory_limit] = 128M
          php_admin_value[session.save_handler] = files
          php_admin_value[session.save_path] = '/tmp'

    # Delete comments generated by ANSIBLE      
    - name: Delete ANSIBLE comments on the www.conf file
      command: sed -i '/# /d' /etc/php/7.2/fpm/pool.d/www.conf

    - name: Download Joomla
      get_url: url="{{package_url}}" dest="~/joomla.tar.gz" force="{{j_force_param_str}}"
      when: get_from_repo == true
      tags:
      - joomla

    - name: Clean project_dir content if reinstallation variable is true
      file: path="{{project_dir}}" state="absent" 
      when: reinstallation == true
    
    - name: Ensure destination dir exists 
      file: path="{{project_dir}}" state="directory"  owner="{{site_owner}}" group="{{site_group}}" mode=0775 recurse=yes
      tags:
      - joomla  
      
    - name: Unarchive Joomla
      unarchive: copy=no src="~/joomla.tar.gz" dest="{{project_dir}}" owner="{{site_owner}}" group="{{site_group}}" mode=0775 
      tags:
      - joomla

    # Creating Databases and users
    
    # inject a db
    - name: Joomla initial data 
      template: src="{{item.path}}" dest="~/{{item.name}}"
      with_items: 
      - "{{import_sql_files}}"
      tags:
      - joomla
      when: import_sql == true

    - name: Template add adminpanel.sql
      template: src="templates/adminpanel.sql" dest="~/{{joomla_db}}_adminpanel.sql"
      tags:
      - joomla



    # delete
    - name: Drop database if reinstallation is true
      mysql_db: login_host="{{db_host}}" name="{{joomla_db}}" login_user="{{db_user}}" login_password="{{db_pass}}" state=absent
      when: reinstallation == true

    #- name: Create mysql db and user for joomla website.
    #  command: mysql -h {{db_host}} -u {{db_user}} -p{{db_pass}} -e "CREATE DATABASE {{joomla_db}}; GRANT ALL PRIVILEGES ON {{joomla_db}}.* TO {{joomla_user}} IDENTIFIED BY '{{db_pass}}';"
    #  tags:
    #  - joomla

    - name: Create mysql joomla database
      mysql_db: encoding="utf8" login_host="{{db_host}}" login_user="{{db_user}}" login_password="{{db_pass}}" name="{{joomla_db}}" state=present
      tags:
      - joomla    


    # verify import procedure and install Joomla
    - name: Determine if import has already been done
      shell: mysql -h {{db_host}} -u {{db_user}} -p{{db_pass}} -e  'show tables;' {{joomla_db}}  
      register: db_created
      changed_when: "( db_created.stdout.find('{{site_dbprefix}}') == -1 )"
      tags:
      - joomla

    - debug: var=db_created 
      tags:
      - joomla


      # removed encoding="utf8"
    - name: Import initial data in  mysql joomla database
      mysql_db: encoding="utf8" login_host="{{db_host}}" login_user="{{db_user}}" login_password="{{db_pass}}" name="{{joomla_db}}" target="~/{{item.name}}" state=import
      with_items:
      - "{{import_sql_files}}"
      when: db_created.changed and import_sql == true
      tags:
      - joomla

    #- name: Create mysql joomla database
    #  mysql_db: login_host="{{db_host}}" name="{{joomla_db}}" login_user="{{db_user}}" login_password="{{db_pass}}" login_port="{{db_port}}" state=present 
    #  tags:
    #  - joomla

    #- name: Create joomla DB user
    #  mysql_user: 
    #      login_host: "{{db_host}}" 
    #      login_user: "{{db_user}}" 
    #      login_password: "{{db_pass}}" 
    #      login_port: "{{db_port}}" 
    #      #host: "{{ db_host }}"Â 
    #      name: "{{ joomla_user }}" 
    #      password: "{{db_pass}}"
    #      priv: "{{joomla_db}}.*:ALL" 
    #      state: "present"
    #      append_privs: "yes"
    #  tags:
    #  - joomla

    - name: Create admin user in  mysql joomla database
      mysql_db: encoding="utf8" login_host="{{db_host}}" login_user="{{db_user}}" login_password="{{db_pass}}" name="{{joomla_db}}" target="~/{{joomla_db}}_adminpanel.sql" state=import
      ignore_errors: yes
      tags:
      - joomla


    - name: Delete admin.sql
      file: path="~/{{joomla_db}}_adminpanel.sql" state="absent"
      tags:
      - joomla



    - name: Delete installation dir 
      file: path="{{project_dir}}/installation" state="absent"
      tags:
      - joomla
      when: delete_installation_dir ==  true


    - name: Create joomla DB user
      mysql_user: login_host="{{db_host}}" login_user="{{db_user}}" login_password="{{db_pass}}" name="{{joomla_user}}" password="{{db_pass}}" priv="{{joomla_db}}.*:ALL" state="present" append_privs=yes
      tags:
      - joomla



    - name: template configuration file 
      template: src="templates/configuration.php" dest="{{project_dir}}/configuration.php" owner="{{site_owner}}" group="{{site_group}}" mode=0764 
      tags:
      - joomla
  
    - name: template aws-logs file 
      template: src="scripts/aws-logs.sh" dest="/home/{{default_user}}/aws-logs.sh" owner="{{default_user}}" group="{{default_group}}" mode=0775 
      tags:
      - cloudwatch

      
    - name: Ansible shell module setting environment variable
      shell: bash /home/{{default_user}}/aws-logs.sh

    # Install aws cli

    - name: 'Install AWS CLI'
      tags: 'aws-cli'
      pip: >
        name=awscli
        state=latest
    
    - name: 'Create the AWS config directory'
      tags: 'aws-cli'
      become: 'yes'
      file: >
        path=/home/{{ default_user }}/.aws
        state=directory
        owner={{ default_user }}
        group={{ default_group }}
        mode=0755
    
    - name: 'Copy AWS CLI config'
      tags: 'aws-cli'
      become: 'yes'
      template: >
        src=templates/aws_cli_config
        dest=/home/{{ default_user }}/.aws/config
        owner={{ default_user }}
        group={{ default_group }}
        mode=0600

    - name: 'Copy AWS CLI credentials'
      tags: 'aws-cli'
      become: 'yes'
      template: >
        src=templates/aws_cli_credentials
        dest=/home/{{default_user}}/.aws/credentials
        owner={{ default_user }}
        group={{ default_group }}
        mode=0600

    - name: 'Copy awslogs config file'
      tags: 'aws-logs-conf'
      become: 'yes'
      template: >
        src=templates/awslogs.conf
        dest=/home/{{default_user}}/
        owner={{ default_user }}
        group={{ default_group }}
        mode=0775
 
    # Install awslogs in non-interactive mode 
    - name: Install awslogs in non-interactive mode
      command: python /home/{{default_user}}/awslogs-agent-setup.py --region eu-west-1 --non-interactive -c /home/{{default_user}}/awslogs.conf


    # restart awslogs daemon
    - name: Restart awslogs service
      command: service awslogs restart




  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted
    - name: restart php-fpm
      service:
        name: php7.2-fpm
        state: restarted
